


# 🛡️ Cyber Assistant — AI-Powered Terminal for Ethical Hacking

![Secure CLI AI](https://img.shields.io/badge/Security-Focused-brightgreen?style=for-the-badge&logo=linux&logoColor=white)

---

**Cyber Assistant** is a voice + text terminal-based assistant designed for **ethical hacking, cybersecurity education**, and **CTF automation**. It empowers hackers and students to interact with hacking tools using **natural language**, perform tasks faster, and learn by doing — all within a secure, controlled terminal environment.

---

### 🔐 **Security & InfoSec Use Cases**

- ✅ **Offline-Safe Demo Mode** for CTF demos, air-gapped labs, and judge evaluations  
- ✅ **Live Mode Execution** for real-world red team tasks using tools like Nmap, SQLmap, John, etc.  
- ✅ **Voice-Controlled Pentesting** for accessibility or hands-free environments  
- ✅ **Beginner-Friendly CLI Guidance** with AI-generated commands and explanations  
- ✅ **Safe Learning Sandbox** to explore offensive techniques without causing harm  

---

Built for **Kali, Parrot, and Ubuntu**, this tool ensures ethical practice, reproducibility, and privacy-first design — with no GUI bloat.

### 🚀 Features

- 🧠 AI-Powered Command Generation (Gemini/OpenAI adapters)
- 🎤 Voice & Text Input Modes (Vosk support)
- 🔐 Ethical Mode Toggle (DEMO vs Live)
- 🛠️ Supports Top Pentest Tools (Nmap, SQLmap, Hydra, etc.)
- 📦 .deb Installer for Easy Setup
- 🧪 Mock Output for Safe Demos


## 🧪 Demo Mode

🧠 Simulated environment with no real API keys or tool execution. Judges can try commands safely offline. All interactions are mocked!

---

### 🖼️ Screenshots

#### 🚀 Demo Mode Showcase

🔹 **Launching Demo Mode**  
[![Launching Demo Mode](media/demo_mode/demo_startup.jpeg)](media/demo_mode/demo_startup.jpeg)

🔹 **AI generating mock suggestions**  
[![AI generating mock suggestions](media/demo_mode/demo_running1.jpeg)](media/demo_mode/demo_running1.jpeg)

🔹 **Mock output explanation shown**  
[![Mock output explanation](media/demo_mode/demo_running2.jpeg)](media/demo_mode/demo_running2.jpeg)

---

### 🎞️ GIF Preview

🎬 **Demo Mode in action!**  
[![Demo Mode in action!](media/demo_mode/demo_mode.gif)](media/demo_mode/demo_mode.gif)

---

### 🎥 Full Demo Video

▶️ [Cyber Assistant Demo - Watch Video](https://youtu.be/7wr2LCZurDA)
## 🚀 Live Mode

💥 Executes real shell commands and uses live LLMs (OpenAI, Gemini) to explain output. Use only in safe & legal environments.

---

### 🖼️ Screenshots

⚡ **Live Mode bootup**  
[![Live Mode bootup](media/live_mode/live_startup.jpeg)](media/live_mode/live_startup.jpeg)

🧨 **Running real hacking tools**  
[![Running real hacking tools](media/live_mode/live_1.jpeg)](media/live_mode/live_1.jpeg)

💡 **Assistant explains output**  
[![Assistant explains output](media/live_mode/live_2.jpeg)](media/live_mode/live_2.jpeg)

🕵️ **Interactive debugging**  
[![Interactive debugging](media/live_mode/live_3.jpeg)](media/live_mode/live_3.jpeg)

---

### 🎞️ GIF Preview

🎬 **Live mode walkthrough in motion**  
[![Live mode walkthrough in motion](media/live_mode/live_mode.gif)](media/live_mode/live_mode.gif)

---

### 🎥 Full Live Session Videos

▶️ [Live Session Part 1 - Watch Video](https://youtu.be/i5ATgRiXxxk)  
▶️ [Live Session Part 2 - Watch Video](https://youtu.be/k3ONRbtxZWc)

## 📦 Program Setup

> ⚙️ This section guides you through initial installation and launching the assistant before using any of the modes.

---

### 🖼️ Screenshots

#### 📥 Installation Stage  
[![Installation Stage](media/program/program_installation.jpeg)](media/program/program_installation.jpeg)

#### 🟢 Startup Success  
[![Startup Success](media/program/program_start.jpeg)](media/program/program_start.jpeg)

---

### 🎞️ GIF Preview

🎬 **Step-by-step installation walkthrough**  
[![Installation Walkthrough](media/program/program_setup.gif)](media/program/program_setup.gif)

---

### 🎥 Video Walkthrough

▶️ [First Setup - Watch Video](https://youtu.be/n165TtI_aLQ)

PROJECT STRUCTURE
.
├── adapters/            # 🧩 Input methods (text/voice)
├── assistant/           # 🧠 AI adapters and logic
├── nova_voice/          # 🎤 Voice recognition via Vosk
├── tools/               # 🛠️ Hacking utilities
├── scripts/             # ⚙️ Automation scripts (coming soon)
├── requirements/        # 📦 Dependencies per OS
├── installers/          # 🧰 Cross-platform launchers
├── docs/                # 📚 Guides, docs, and architecture
├── tests/               # ✅ Unit tests
├── guides/              # 🔐 Cybersecurity usage how-tos
├── media/               # 🖼️ Screenshots, GIFs, and video thumbnails
│   ├── program/
│   │   ├── program_installation.jpeg
│   │   ├── program_start.jpeg
│   │   └── program_setup.gif
│   ├── demo_mode/
│   │   ├── demo_startup.jpeg
│   │   ├── demo_1.jpeg
│   │   ├── demo_2.jpeg
│   │   ├── demo_3.jpeg
│   │   └── demo_mode.gif
│   ├── live_mode/
│   │   ├── live_startup.jpeg
│   │   ├── live_1.jpeg
│   │   ├── live_2.jpeg
│   │   ├── live_3.jpeg
│   │   └── live_mode.gif
├── main.py              # 🚀 Entry point
└── README.md            # 📖 Project Overview and Usage Instructions

🔐 Built-in Ethical Tools:

    Password cracking

    SQL Injection

    Info gathering

    Malware analysis

🧪 DEMO Mode (For Judges & Offline Use)

🔍 No API Key Required. Everything is simulated.

    Copy the example config:

cp .env.example .env

    Set DEMO mode in your .env:

DEMO_MODE=true

    Run the assistant:

python3 main.py

✅ You will enter interactive simulation mode — no network access, but full voice/text input and mocked results for testing.

Enable real-time AI command generation using LLMs:

    Add your keys in .env:

GEMINI_API_KEY=your_key
OPENAI_API_KEY=your_key
DEMO_MODE=false

    Run:

python3 main.py

💡 Choose between text or voice input dynamically.

📸 Insert screenshot of live LLM output and explanation
💬 Sample Prompts (Work in Both Modes)

Prompt:

    scan open ports on 127.0.0.1

Response:

🤖 Choose one to run:
1. nmap -sV 127.0.0.1
2. sudo nmap -A 127.0.0.1
3. rustscan -a 127.0.0.1 -- -sV -sC

Prompt:

    crack password hash using john

Response:

🤖 Choose one to run:
1. john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt
2. john --incremental --format=raw-md5 hashes.txt

Prompt:

    enumerate SQL injection using sqlmap

Response:

🤖 Choose one:
1. sqlmap -u "http://target.com/index.php?id=1" --dbs
2. sqlmap -r request.txt --batch --risk=3 --level=5

📘 Mock explanations are simple, clear, and technical enough for judges & users.
🌈 Coming Soon — UI/UX Customizations

🎨 Terminal Themes
🌀 Shell Animations
⚙️ Command History Replays
🧩 Plugin Tool Support (Wireshark, Metasploit, etc.)
🌐 Language Packs & Accessibility Options
🔐 Ethical Use Policy

🚨 Parrot-GPT is built for legal, educational, and ethical testing only.

Using this on unauthorized systems is illegal and violates Parrot-GPT’s terms of use.
Always ensure you have explicit permission when conducting tests.
📈 Scalability Vision




### 🖼️ Screenshots

#### 📥 Installation Stage:

![Installation Stage](media/program/program_installation.jpeg)

#### 🟢 Startup Success:

![Startup Success](media/program/program_start.jpeg)

---

### 🎞️ GIF Preview

🎬 **Step-by-step installation walkthrough**  
![Installation Walkthrough](media/program/program_setup.gif)

#### 🚀 Demo Mode Showcase

🚀 **Launching Demo Mode**  
![Launching Demo Mode](media/demo_mode/demo_startup.jpeg)

🤖 **AI generating mock suggestions**  
![AI generating mock suggestions](media/demo_mode/demo_running1.jpeg)

🎯 **Mock output explanation shown**  
![Mock output explanation](media/demo_mode/demo_running2.jpeg)

---

### 🎞️ GIF Preview

🎬 **Demo Mode in action!**  
![Demo Mode in action!](media/demo_mode/demo_mode.gif)


⚡ **Live Mode bootup**  
![Live Mode bootup](media/live_mode/live_startup.jpeg)

🧨 **Running real hacking tools**  
![Running real hacking tools](media/live_mode/live_1.jpeg)

💡 **Assistant explains output**  
![Assistant explains output](media/live_mode/live_2.jpeg)

🕵️ **Interactive debugging**  
![Interactive debugging](media/live_mode/live_3.jpeg)

---

### 🎞️ GIF Preview

🎬 **Live mode walkthrough in motion**  
![Live mode walkthrough in motion](media/live_mode/live_mode.gif)



🧠 Project Summary & Roadmap Vision

Cyber Assistant is more than just a voice-powered shell interface. It’s an evolving cybersecurity companion built to make AI-driven hacking, analysis, and automation ethical, intelligent, and accessible — across any Debian-based system.

🚀 What It Does (Current Features)



💬 Interacts using voice or text through custom adapters
🧠 Integrates with Gemini and OpenAI for multi-model LLM support
🖥️ Executes terminal commands with intelligent fallback
🛡️ Enforces ethical mode via built-in safeguards
🧪 Provides mock output simulation in DEMO mode for testing
📜 Explains commands for learners and red teamers alike
🔐 Built with modular architecture for AI, voice, terminal, and branding separation
🧩 Supports plug-and-play tools (e.g., nmap, hydra, sqlmap, beef, etc.)
📦 Available as a .deb installer and Dockerized runtime (in progress)
📸 Comes with screenshots, GIF previews, and a full video walkthrough



🧭 Our Roadmap (What We've Built So Far)

Phase	Progress

🧪 Idea formation	✅ You envisioned a local, voice-interactive assistant with hacking tools

🛠️ Tool integration	✅ Added nmap, hydra, sqlmap, beef, ngrok etc.

🧬 AI Core	✅ Unified Gemini and OpenAI models using adaptive fallback

🎙️ Voice input	✅ Custom adapter with Vosk, fallback to text input

👨‍🏭 DEMO Mode	✅ Judges can fully interact via simulated output

🔐 Ethical Guardrails	✅ Prevents illegal payloads and limits unsafe actions

📦 .deb Packaging	🕐 In progress (clean GitHub releases with only essentials)

🐳 Docker Container	🕐 In progress (cross-platform, isolated testing environment)

📚 Documentation	✅ Detailed README with setup, features, and full media suite
🔧 CI/CD	🕐 Planned (syntax tests, linting, install tests)


🔮 Future Vision (What’s Coming Next)
You’re building something beyond a typical AI assistant — this is an intelligent cyber defense + attack interface powered by secure design, modular thinking, and voice biometrics.


Here's what we're exploring next:
🗣️ Voice Security Activation
Activate critical operations (like system lockdowns or sudo escalation) only via secure voiceprint or unique analog frequency signals.


🔊 Analog Frequency Tracing
Use unique acoustic frequencies (outside human hearing range) to validate user identity, like a covert voice-based 2FA.

🧠 Context-Aware Sessions
The assistant will detect and switch between “Recon”, “Exploit”, or “Defense” modes based on natural language cues.


🔍 Live Threat Detection & IDS Integration
Combine with Suricata or custom modules to detect malicious traffic — and automatically disconnect or isolate affected systems.

🛠️ Interactive TryHackMe Mode
A training-focused plugin that guides learners through labs using live narration and CLI examples.


🔄 Session Replay
Store and replay command sessions for auditing, learning, or team collaboration.

## Related

Here are some related projects

[Awesome README](https://github.com/matiassingers/awesome-readme)

🔐 Security Notice


Cyber Assistant is a powerful shell-integrated tool capable of executing and explaining real commands. While it includes a DEMO mode for safe offline testing, its LIVE mode can run system-level operations — use responsibly and legally.

⚠️ Disclaimer: This tool is intended for educational, ethical hacking, and authorized environments only. Misuse for unauthorized access, exploitation, or malicious purposes is strictly prohibited and violates local and international laws.

Future versions will include:

🛡️ Secure Session Tokens

🔊 Voice Authentication via Analog Frequency Matching

📈 Command Integrity Logging

🌐 Offline-only privacy mode





[MIT](https://choosealicense.com/licenses/mit/)


📄 License
This project is licensed under the MIT License — see the LICENSE file for details.
A copy of the license is provided below:
MIT License

Copyright (c) 2025 Cyber Assistant Team

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
🔗 Repository Info
📁 Repo: cyber-assistant
👨‍💻 Maintainer: OC11444
✨ If you find this project helpful, consider starring the repo, submitting ideas via GitHub Discussions, or contributing via Pull Requests.
© 2025 Cyber Assistant Team — Made with 🧠 intelligence, 🛠️ tools, and ❤️ passion for secure automation.
